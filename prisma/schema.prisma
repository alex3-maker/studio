// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("USER") // ADMIN or USER
  keys          Int       @default(0)
  duelsCreated  Int       @default(0) @map("duels_created")
  votesCast     Int       @default(0) @map("votes_cast")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  password      String?

  duels    Duel[]
  votes    Vote[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Duel {
  id          String       @id @default(cuid())
  type        String       @default("A_VS_B") // A_VS_B or LIST
  title       String
  description String?
  creatorId   String
  status      String       @default("DRAFT") // DRAFT, SCHEDULED, ACTIVE, CLOSED, INACTIVE
  createdAt   DateTime     @default(now())
  startsAt    DateTime
  endsAt      DateTime
  options     DuelOption[]
  votes       Vote[]
  guestVotes  GuestVote[]
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model DuelOption {
  id            String  @id @default(cuid())
  duelId        String
  title         String
  imageUrl      String?
  affiliateUrl  String?
  votes         Int     @default(0)
  duel          Duel    @relation(fields: [duelId], references: [id], onDelete: Cascade)
  userVotes     Vote[] // The field that links back to the Vote model
}

model Vote {
  id       String     @id @default(cuid())
  userId   String
  duelId   String
  optionId String
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  duel      Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  option    DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, duelId])
}

model GuestVote {
  id        String   @id @default(cuid())
  duelId    String
  optionId  String
  ipHash    String // Hashed IP address
  createdAt DateTime @default(now())

  duel Duel @relation(fields: [duelId], references: [id], onDelete: Cascade)

  @@unique([duelId, ipHash], name: "dueliax_guest_votes_duel_ip_unique")
  @@map("guest_votes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
