// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  passwordHash String? @map("password_hash")
  image        String?
  role         Role   @default(USER)
  keys         Int    @default(0)
  duelsCreated Int    @default(0)
  votesCast    Int    @default(0)

  createdAt DateTime @default(now())

  duels         Duel[]
  votes         Vote[]
  keyHistory    KeyTransaction[]
  notifications Notification[]
}

model Duel {
  id          String   @id @default(cuid())
  type        DuelType
  title       String
  description String?
  creatorId   String
  status      DuelStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  startsAt    DateTime
  endsAt      DateTime

  creator User         @relation(fields: [creatorId], references: [id])
  options DuelOption[]
  votes   Vote[]
  guestVotes GuestVote[]

  @@map("Duel")
}

model DuelOption {
  id           String  @id @default(cuid())
  title        String
  imageUrl     String?
  affiliateUrl String?
  votes        Int     @default(0)
  duelId       String

  duel       Duel        @relation(fields: [duelId], references: [id], onDelete: Cascade)
  guestVotes GuestVote[]

  @@map("DuelOption")
}

model Vote {
  id       String @id @default(cuid())
  userId   String
  duelId   String
  optionId String

  user   User       @relation(fields: [userId], references: [id])
  duel   Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  option DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, duelId])
  @@map("Vote")
}

model GuestVote {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  duelId    String   @map("duel_id")
  optionId  String   @map("option_id")
  ipHash    String   @map("ip_hash")
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)

  duel   Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  option DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([duelId, ipHash], map: "dueliax_guest_votes_duel_ip_unique")
  @@map("dueliax_guest_votes")
}


model KeyTransaction {
  id          String           @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Int
  description String
  timestamp   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  link      String?
  timestamp DateTime         @default(now())
  read      Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
}


enum DuelType {
  A_VS_B
  LIST
}

enum DuelStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  CLOSED
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  EARNED
  SPENT
}

enum NotificationType {
  DUEL_CLOSED
  DUEL_EDITED
  DUEL_RESET
  WINNER_CHANGED
  KEYS_SPENT
}
