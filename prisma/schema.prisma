
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // "USER" or "ADMIN"
  keys          Int       @default(0)
  duelsCreated  Int?      @default(0)
  votesCast     Int?      @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  duels    Duel[]
  votes    Vote[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Duel {
  id          String       @id @default(cuid())
  type        String // "A_VS_B" or "LIST"
  title       String
  description String?
  creatorId   String
  status      String       @default("DRAFT") // DRAFT, SCHEDULED, ACTIVE, CLOSED, INACTIVE
  createdAt   DateTime     @default(now())
  startsAt    DateTime
  endsAt      DateTime

  creator User         @relation(fields: [creatorId], references: [id])
  options DuelOption[]
  votes   Vote[]
  guestVotes GuestVote[]

  @@map("Duel")
}

model DuelOption {
  id           String  @id @default(cuid())
  duelId       String
  title        String
  imageUrl     String?
  affiliateUrl String?
  votes        Int     @default(0)

  duel  Duel   @relation(fields: [duelId], references: [id], onDelete: Cascade)
  votes Vote[]
  guestVotes GuestVote[]

  @@map("DuelOption")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  duelId    String
  optionId  String
  createdAt DateTime @default(now())

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  duel   Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  option DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, duelId])
}

model GuestVote {
  id        String @id @default(uuid())
  duel_id   String
  option_id String
  ip_hash   String
  createdAt DateTime @default(now()) @map("created_at")

  duel   Duel       @relation(fields: [duel_id], references: [id], onDelete: Cascade)
  option DuelOption @relation(fields: [option_id], references: [id], onDelete: Cascade)

  @@unique([duel_id, ip_hash])
  @@map("dueliax_guest_votes")
}
