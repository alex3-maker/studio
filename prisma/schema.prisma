generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String    @id @default(cuid())
  name         String?
  email        String    @unique
  image        String?
  password     String?
  role         Role      @default(USER)
  keys         Int       @default(0)
  duelsCreated Int?      @default(0)
  votesCast    Int?      @default(0)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  duels         Duel[]
  votes         Vote[]
  keyHistory    KeyTransaction[]
  notifications Notification[]
}

model Duel {
  id          String       @id @default(cuid())
  type        String
  title       String
  description String?
  creatorId   String
  status      String       @default("DRAFT")
  createdAt   DateTime     @default(now())
  startsAt    DateTime
  endsAt      DateTime
  options     DuelOption[]
  votes       Vote[]
  guestVotes  GuestVote[]
  creator     User         @relation(fields: [creatorId], references: [id])
}

model DuelOption {
  id           String      @id @default(cuid())
  duelId       String
  title        String
  imageUrl     String?
  affiliateUrl String?
  votes        Int         @default(0)
  duel         Duel        @relation(fields: [duelId], references: [id], onDelete: Cascade)
  Vote         Vote[]
  GuestVote    GuestVote[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  duelId    String
  optionId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  duel      Duel     @relation(fields: [duelId], references: [id])
  option    DuelOption @relation(fields: [optionId], references: [id])

  @@unique([userId, duelId])
}

model GuestVote {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  duelId    String   @map("duel_id")
  optionId  String   @map("option_id")
  ipHash    String   @map("ip_hash")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  duel      Duel     @relation(fields: [duelId], references: [id], onDelete: Cascade)
  option    DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([duelId, ipHash], map: "dueliax_guest_votes_duel_id_ip_hash_key")
  @@map("dueliax_guest_votes")
}

model KeyTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Int
  description String
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  link      String?
  timestamp DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
