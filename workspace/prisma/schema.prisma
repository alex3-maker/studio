// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.ukevxalsfdtrfksdksux:z3w7v%25Twu%26%28%29@aws-0-eu-west-1.pooler.supabase.com:6543/postgres?sslmode=require"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?   @map("password_hash")
  avatarUrl     String?
  role          Role      @default(USER)
  keys          Int       @default(5)
  duelsCreated  Int       @default(0) @map("duels_created")
  votesCast     Int       @default(0) @map("votes_cast")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  duels Duel[]
  votes Vote[]

  @@map("users")
}

model Duel {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  creatorId   String
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now()) @map("created_at")
  startsAt    DateTime @map("starts_at")
  endsAt      DateTime @map("ends_at")

  creator User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  options DuelOption[]
  votes   Vote[]
  guestVotes GuestVote[]

  @@map("duels")
}

model DuelOption {
  id           String  @id @default(cuid())
  duelId       String
  title        String
  imageUrl     String? @map("image_url")
  affiliateUrl String? @map("affiliate_url")
  votes        Int     @default(0)

  duel        Duel      @relation(fields: [duelId], references: [id], onDelete: Cascade)
  userVotes   Vote[]
  guestVotes  GuestVote[]

  @@map("duel_options")
}


model Vote {
  id        String   @id @default(cuid())
  userId    String
  duelId    String
  optionId  String
  createdAt DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  duel       Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  duelOption DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, duelId])
  @@map("votes")
}

model GuestVote {
  id        String   @id @default(cuid())
  ipHash    String
  duelId    String
  optionId  String
  createdAt DateTime @default(now())

  duel       Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  duelOption DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([duelId, ipHash], name: "dueliax_guest_votes_duel_ip_unique")
  @@map("guest_votes")
}


enum Role {
  USER
  ADMIN
}