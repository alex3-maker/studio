// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.ukevxalsfdtrfksdksux:z3w7v%25Twu%26%28%29@aws-0-eu-west-1.pooler.supabase.com:6543/postgres?sslmode=require"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?   @map("password_hash")
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("USER")
  keys          Int       @default(0)
  duelsCreated  Int       @default(0)
  votesCast     Int       @default(0)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  duels      Duel[]
  votes      Vote[]
  guestVotes GuestVote[]

  @@map("users")
}

model Duel {
  id          String       @id @default(cuid())
  type        String       @default("A_VS_B") // 'A_VS_B', 'LIST'
  title       String
  description String?
  creatorId   String
  status      String       @default("DRAFT") // 'DRAFT', 'SCHEDULED', 'ACTIVE', 'CLOSED', 'INACTIVE'
  createdAt   DateTime     @default(now())
  startsAt    DateTime
  endsAt      DateTime
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  options     DuelOption[]
  votes       Vote[]
  guestVotes  GuestVote[]
}

model DuelOption {
  id           String  @id @default(cuid())
  duelId       String
  title        String
  imageUrl     String?
  affiliateUrl String?
  votes        Int     @default(0)
  duel         Duel    @relation(fields: [duelId], references: [id], onDelete: Cascade)
  userVotes    Vote[]
}

model Vote {
  id       String     @id @default(cuid())
  userId   String
  duelId   String
  optionId String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  duel     Duel       @relation(fields: [duelId], references: [id], onDelete: Cascade)
  option   DuelOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, duelId])
}

model GuestVote {
  id       String   @id @default(cuid())
  ipHash   String
  duelId   String
  optionId String
  votedAt  DateTime @default(now())
  user     User     @relation(fields: [ipHash], references: [id], onDelete: Cascade, map: "guest_votes_ip_hash_fkey") // This assumes you want to link guest votes to a user if they register. Adjust if needed.
  duel     Duel     @relation(fields: [duelId], references: [id], onDelete: Cascade)

  @@unique([ipHash, duelId], name: "dueliax_guest_votes_duel_ip_unique")
  @@map("guest_votes")
}
